// Header file for Algoritm functions
// Shared with ESP32 code

#ifdef __cplusplus
extern "C" {
#endif

	// Prototypes
	extern int test(void);
	extern void KVtargetAlgoritm(double KVval, long timestamp);
	extern void BetaAdjust(void);
	extern double HPPowerSetpoint(double AmbTemp);
	extern void UpdateHeatCurve(double AmbTemp, double HPPower);
	extern int simple_linear_regression(const double* x, const double* y, const int n, double* slope_out, double* intercept_out, double* r2_out);
	extern void LoadDefaultHeatCurve(void);

#define NULL 0
	// Constants/variables for KValgoritm
#define KV_AMBITION_UFH 0.5		// How close the KV_TARGET is to KV_HIGH taken from KV_Mean
#define KV_MEAS_AVGSAMPLES 6	// KV is sampled every 30minutes, so 6 samples is 3 hours running average
#define KV_ENVELOPE_DECAY 480	// KV is sampled every 30minutes, so 480 samples is 10 days decay
#define KV_ARRAY_SIZE 40000		// Size of KV array

#define HOUSE_ARRAY_SIZE 100 // Array has 100 points

#define DHW 1
#define TANKCHARGE 2
#define TANKDISCHARGE 4
#define ONLYHEATING 0		// SystemMode is set according to current operating mode. For example during DHW HouseModel is not updated

	typedef struct {
		double kv_UFH;				// Current KV value for UFH zone
		double kv_low_UFH;			// UFH KV low envelope(generated by algorithm)
		double kv_high_UFH;			// UFH KV high envelope (generated by algorithm)
		double kv_mean_UFH;			// UFH mean value (mid between KV_HIGH and KV_Low) (generated by algorithm)
		double kv_target_UFH;		// The target value that the KV algorithm uses to regulate the HP temperature 
		double KV_RAD;
		double kv_low_RAD;
		double kv_high_RAD;
		double kv_mean_RAD;
		double kv_target_RAD;
		double Toutdoor_HP;			// Outdoor temperature, from Heatpump (API)
		double Toutdoor_DMI;		// Outdoor temperature, from internet forecast (API)
		double Windoutdoor_DMI;
	} KVStruct;

	typedef struct {
		double Alpha;
		double Beta;
		double BetaMod;						// Value that is added to House Curve to determine the power setpoint
		double AlphaDefault;				// Alpha calculated from user input (kW)
		double BetaDefault;
	} HouseCurveStruct;

	// Variables

	KVStruct KValgo[KV_ARRAY_SIZE];			// array with 400k points, all KV data
	double KVarrayData[KV_ARRAY_SIZE];		// Simulates raw data from the KV detection function
	double HouseArray[HOUSE_ARRAY_SIZE];	// Data for House Curve
	double HouseArrayx[HOUSE_ARRAY_SIZE];	// x values, used for regression analysis
	HouseCurveStruct HouseModel;
	int SystemMode;


#ifdef __cplusplus
}
#endif

